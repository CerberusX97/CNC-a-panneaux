/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ca.ulaval.equipe58.UI;
import Utils.ConvertisseurPxMm;
import Utils.Point3D;
import ca.ulaval.equipe58.UI.Drawer.Drawer;
import ca.ulaval.equipe58.domaine.Controller;
import ca.ulaval.equipe58.domaine.Coupe;
import ca.ulaval.equipe58.domaine.EdgeType;
import ca.ulaval.equipe58.domaine.OutilDTO;
import ca.ulaval.equipe58.domaine.Outil;
import ca.ulaval.equipe58.domaine.PanneauDTO;
import ca.ulaval.equipe58.domaine.ReferenceType;
import java.util.List;
import javax.swing.*;
import java.awt.event.MouseEvent;
import java.awt.Point;
/**
 *
 * @author ADMO-PC
 */
public class Afficheur extends javax.swing.JFrame {
    public Controller controller;
    
    public ApplicationMode actualMode;
    private Drawer drawer;
    public Point3D actualMousePoint = new Point3D();
    public Point delta = new Point();
    private Coupe coupeSurvolee = null;
    private Point3D pointReference = null;
    private Point3D pointDeCoupe = null;
    private Point3D firstPointDeCoupe = null;
    private Point3D secondPointDeCoupe = null;
    private double distanceFromReference = 0;

    
    
    public enum ApplicationMode{
        COUPER,SUPPRIMER,SELECT
    }

    public enum CutCreationState {
        SELECT_REFERENCE,
        SELECT_CUT_POINT,
        SELECT_FIRST_CUT_POINT,
        SELECT_SECOND_CUT_POINT
    }

    private CutCreationState cutCreationState = CutCreationState.SELECT_REFERENCE;
    private ReferenceType selectedReferenceType;
    private EdgeType selectedEdgeType;
    private Coupe selectedReferenceCoupe;
    private javax.swing.JLabel coordLabel;

    
    /**
     * Creates new form root
     */
    public Afficheur() {
        controller = new Controller();
        initComponents();
        ajoutComboBoxOutils(); 
        //mainPannel = new ZoomablePannel(this);
        //getContentPane().add(mainPannel);  
        pack(); 
        setSize(1600, 900);  
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    }
    
    private void ajoutComboBoxOutils() {
        List<OutilDTO> outils = controller.obtenirListeOutils();
        jComboBoxOutils.removeAllItems();
        for (OutilDTO outil : outils) {
            String monOutilInformation = outil.getNom() + " (" + outil.getLargeur() + " mm)";
            jComboBoxOutils.addItem(monOutilInformation);      
    }
    }  
    public void updateCoordinateDisplay(double xMm, double yMm) {
    jLabel7.setText(String.format("Point: X: %.1f mm, Y: %.1f mm", xMm, yMm));
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        buttonGroup1 = new javax.swing.ButtonGroup();
        mainPannel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        messageLabel = new javax.swing.JLabel();
        largeurGrilleField = new javax.swing.JTextField();
        hauteurGrilleField = new javax.swing.JTextField();
        appliquerTailleGrilleBtn = new javax.swing.JButton();
        labelDimensions = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        zoomablePannel2 = new ca.ulaval.equipe58.UI.ZoomablePannel(this);
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ModifCoupe = new javax.swing.JTextField();
        Deplace = new javax.swing.JButton();
        Suppreseur = new javax.swing.JButton();
        Select = new javax.swing.JToggleButton();
        Couper = new javax.swing.JToggleButton();
        typesDeCoupe = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBoxOutils = new javax.swing.JComboBox<>();
        jTextFieldNomOutils = new javax.swing.JTextField();
        jTextFieldOutilLargeur = new javax.swing.JTextField();
        jButtonAjouterOutils = new javax.swing.JButton();
        jButtonSupprimerOutils = new javax.swing.JButton();
        btn_resetPannel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_PanneauX = new javax.swing.JTextField();
        txt_PanneauY = new javax.swing.JTextField();
        txt_PanneauZ = new javax.swing.JTextField();
        btn_redimension = new javax.swing.JButton();
        confirmerchangeroutil = new javax.swing.JButton();
        modifierOutil = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txt_BordureX = new javax.swing.JTextField();
        txt_BordureY = new javax.swing.JTextField();
        btn_CouperBordure = new javax.swing.JButton();
        btn_RedimBordure = new javax.swing.JButton();
        btn_SuppBordure = new javax.swing.JButton();
        jcheckBoxGrille = new javax.swing.JCheckBox();
        Vitesse_Avance = new javax.swing.JTextField();
        RPM_Gcode = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        modeMagnetiqueCheckbox = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuSaveCNC = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuImportCNC = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        buttonGroup1.add(Select); buttonGroup1.add(Couper);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 51, 51));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        mainPannel.setBackground(new java.awt.Color(204, 204, 204));
        mainPannel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        mainPannel.setMinimumSize(new java.awt.Dimension(300, 200));
        mainPannel.setLayout(new java.awt.BorderLayout());

        messageLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        messageLabel.setText("message");

        largeurGrilleField.setText("50");

        hauteurGrilleField.setText("50");

        appliquerTailleGrilleBtn.setText("Redimensionner la grille");
        appliquerTailleGrilleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appliquerTailleGrilleBtnActionPerformed(evt);
            }
        });

        labelDimensions.setText("Dimensions");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(messageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 1019, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(largeurGrilleField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hauteurGrilleField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(appliquerTailleGrilleBtn)
                .addGap(89, 89, 89))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelDimensions)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(labelDimensions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageLabel)
                    .addComponent(largeurGrilleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hauteurGrilleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appliquerTailleGrilleBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPannel.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        zoomablePannel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                zoomablePannel2MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                zoomablePannel2MouseMoved(evt);
            }
        });
        zoomablePannel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                zoomablePannel2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                zoomablePannel2MouseReleased(evt);
            }
        });

        javax.swing.GroupLayout zoomablePannel2Layout = new javax.swing.GroupLayout(zoomablePannel2);
        zoomablePannel2.setLayout(zoomablePannel2Layout);
        zoomablePannel2Layout.setHorizontalGroup(
            zoomablePannel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2653, Short.MAX_VALUE)
        );
        zoomablePannel2Layout.setVerticalGroup(
            zoomablePannel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1082, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(zoomablePannel2);

        mainPannel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setPreferredSize(new java.awt.Dimension(1330, 100));

        jLabel2.setText("Position de coupe");

        ModifCoupe.setText("0");
        ModifCoupe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifCoupeActionPerformed(evt);
            }
        });

        Deplace.setText("Deplacer");
        Deplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeplaceActionPerformed(evt);
            }
        });

        Suppreseur.setText("Supprimer");
        Suppreseur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SuppreseurActionPerformed(evt);
            }
        });

        Select.setText("Select");
        Select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectActionPerformed(evt);
            }
        });

        Couper.setText("Couper");
        Couper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CouperActionPerformed(evt);
            }
        });

        typesDeCoupe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VERTICALE", "HORIZONTALE", "EN_L", "RECTANGULAIRE" }));
        typesDeCoupe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typesDeCoupeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jComboBoxOutils.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxOutils.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOutilsActionPerformed(evt);
            }
        });

        jTextFieldNomOutils.setText("nom");

        jTextFieldOutilLargeur.setText("8");

        jButtonAjouterOutils.setText("Ajouter Outils");
        jButtonAjouterOutils.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAjouterOutilsActionPerformed(evt);
            }
        });

        jButtonSupprimerOutils.setText("Suprimer Outil");
        jButtonSupprimerOutils.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupprimerOutilsActionPerformed(evt);
            }
        });

        btn_resetPannel.setText("Reset Pannel");
        btn_resetPannel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetPannelActionPerformed(evt);
            }
        });

        jLabel3.setText("Redimension du panneau (X, Y, Z): ");

        txt_PanneauX.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_PanneauX.setPreferredSize(new java.awt.Dimension(100, 30));
        txt_PanneauX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_PanneauXActionPerformed(evt);
            }
        });

        txt_PanneauY.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_PanneauY.setPreferredSize(new java.awt.Dimension(100, 30));
        txt_PanneauY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_PanneauYActionPerformed(evt);
            }
        });

        txt_PanneauZ.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_PanneauZ.setPreferredSize(new java.awt.Dimension(100, 30));

        btn_redimension.setText("Redimension");
        btn_redimension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_redimensionActionPerformed(evt);
            }
        });

        confirmerchangeroutil.setText("Changer l'outil");
        confirmerchangeroutil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmerchangeroutilActionPerformed(evt);
            }
        });

        modifierOutil.setText("Modifier");
        modifierOutil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierOutilActionPerformed(evt);
            }
        });

        jLabel4.setText("Coupe de bordure (X, Y):");

        txt_BordureX.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_BordureX.setPreferredSize(new java.awt.Dimension(100, 30));
        txt_BordureX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_BordureXActionPerformed(evt);
            }
        });

        txt_BordureY.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txt_BordureY.setPreferredSize(new java.awt.Dimension(100, 30));
        txt_BordureY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_BordureYActionPerformed(evt);
            }
        });

        btn_CouperBordure.setText("Coupe Bordure");
        btn_CouperBordure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_CouperBordureActionPerformed(evt);
            }
        });

        btn_RedimBordure.setText("Modifier Bordure");
        btn_RedimBordure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_RedimBordureActionPerformed(evt);
            }
        });

        btn_SuppBordure.setText("Supprimer Bordure");
        btn_SuppBordure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SuppBordureActionPerformed(evt);
            }
        });

        jcheckBoxGrille.setText("Grille");
        jcheckBoxGrille.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcheckBoxGrilleActionPerformed(evt);
            }
        });

        Vitesse_Avance.setText("3");
        Vitesse_Avance.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Vitesse_Avance.setPreferredSize(new java.awt.Dimension(100, 30));
        Vitesse_Avance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Vitesse_AvanceActionPerformed(evt);
            }
        });

        RPM_Gcode.setText("20000");
        RPM_Gcode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        RPM_Gcode.setPreferredSize(new java.awt.Dimension(100, 30));
        RPM_Gcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RPM_GcodeActionPerformed(evt);
            }
        });

        jLabel5.setText("Vitesse d'avance (m/s) :");

        jLabel6.setText("RPM :");

        jButton1.setText("Creer Pannel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Point: X: 0 mm, Y: 0 mm");

        jButton2.setText("Undo");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Redo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        modeMagnetiqueCheckbox.setText("Magnétique");
        modeMagnetiqueCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeMagnetiqueCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ModifCoupe, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Deplace)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Suppreseur)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Select)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Couper)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(typesDeCoupe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcheckBoxGrille, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modeMagnetiqueCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBoxOutils, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_PanneauX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_PanneauY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_PanneauZ, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_redimension)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_resetPannel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_BordureX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_BordureY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_CouperBordure)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_SuppBordure)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_RedimBordure)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(12, 12, 12)
                        .addComponent(Vitesse_Avance, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RPM_Gcode, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(612, 612, 612))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(confirmerchangeroutil)
                            .addComponent(jTextFieldNomOutils, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(modifierOutil)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonSupprimerOutils))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextFieldOutilLargeur, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonAjouterOutils, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(24, 24, 24)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(418, 418, 418)))
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(580, 580, 580)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ModifCoupe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(Deplace)
                        .addComponent(Suppreseur)
                        .addComponent(Select)
                        .addComponent(Couper)
                        .addComponent(typesDeCoupe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxOutils, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldNomOutils, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jTextFieldOutilLargeur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAjouterOutils)
                        .addComponent(jcheckBoxGrille)
                        .addComponent(jButton2)
                        .addComponent(jButton3)
                        .addComponent(modeMagnetiqueCheckbox))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(txt_PanneauX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_PanneauY, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_PanneauZ, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btn_redimension)
                                .addComponent(btn_resetPannel)
                                .addComponent(jButton1))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(confirmerchangeroutil)
                                .addComponent(modifierOutil)
                                .addComponent(jButtonSupprimerOutils, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txt_BordureX, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_BordureY, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_CouperBordure)
                            .addComponent(btn_RedimBordure)
                            .addComponent(btn_SuppBordure)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RPM_Gcode, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(Vitesse_Avance, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        mainPannel.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jMenu1.setText("File");

        jMenuItem4.setText("Undo");
        jMenu1.add(jMenuItem4);

        jMenuItem5.setText("Redo");
        jMenu1.add(jMenuItem5);

        jMenu4.setText("Save");

        jMenuSaveCNC.setText("CNC");
        jMenuSaveCNC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveCNCActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuSaveCNC);

        jMenu1.add(jMenu4);

        jMenu5.setText("Import");

        jMenuImportCNC.setText("CNC");
        jMenuImportCNC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuImportCNCActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuImportCNC);

        jMenu1.add(jMenu5);

        jMenuItem3.setText("GCODE");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPannel, javax.swing.GroupLayout.DEFAULT_SIZE, 1460, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPannel, javax.swing.GroupLayout.DEFAULT_SIZE, 883, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButtonAjouterOutilsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAjouterOutilsActionPerformed
    String nomOutil = jTextFieldNomOutils.getText().trim();
    String largeurEnText = jTextFieldOutilLargeur.getText().trim();

    if (nomOutil.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Le nom de l'outil est requis.", "Erreur", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (largeurEnText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "La largeur de l'outil est requise.", "Erreur", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        double largeur = Double.parseDouble(largeurEnText);
        if (largeur <= 0) {
            JOptionPane.showMessageDialog(this, "La largeur doit être un nombre positif.", "Erreur", JOptionPane.ERROR_MESSAGE);
            return;
        }

        boolean outilExisteDeja = false;
        for (int i = 0; i < jComboBoxOutils.getItemCount(); i++) {
            String item = (String) jComboBoxOutils.getItemAt(i);
            String nomItem = extraireNomDuDropdown(item);

            if (nomItem.trim().equalsIgnoreCase(nomOutil)) {
                outilExisteDeja = true;
                break;
            }
        }
        if (outilExisteDeja) {
            this.afficherMessage("Un outil avec ce nom existe déjà dans la liste.");
            return;
        }
        controller.ajouterOutil(nomOutil, largeur);
        ajoutComboBoxOutils();

        afficherMessage("Outil ajouté avec succès.");

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "La largeur doit être un nombre valide.", "Erreur", JOptionPane.ERROR_MESSAGE);
    } catch (IllegalStateException e) {
        JOptionPane.showMessageDialog(this, "Vous ne pouvez pas ajouter plus de 12 outils.", "Erreur", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jButtonAjouterOutilsActionPerformed

    private void CouperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CouperActionPerformed
        // TODO add your handling code here:
        this.setMode(ApplicationMode.COUPER);
    }//GEN-LAST:event_CouperActionPerformed

     
    private void zoomablePannel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomablePannel2MousePressed
        Point clicked = evt.getPoint();
        Point3D clickedPoint = new Point3D();
        clickedPoint.setX(clicked.x);
        clickedPoint.setY(clicked.y);
        if (evt.getButton() == MouseEvent.BUTTON1) {

        double zoomFactor = zoomablePannel2.getZoomLevel();
        double offsetX = zoomablePannel2.getOffsetX();
        double offsetY = zoomablePannel2.getOffsetY();

        clickedPoint.setX((clickedPoint.getX() - offsetX) / zoomFactor);
        clickedPoint.setY((clickedPoint.getY() - offsetY) / zoomFactor);
        
        // Conversion des pixels en millimètres
        ConvertisseurPxMm convertisseur = new ConvertisseurPxMm();
        double clickedXmm = convertisseur.convertPxToMm(clickedPoint.getX());
        double clickedYmm = convertisseur.convertPxToMm(clickedPoint.getY());
        clickedPoint = new Point3D(clickedXmm, clickedYmm);
        this.actualMousePoint = clickedPoint;

            if (actualMode == ApplicationMode.COUPER) {
                String typeDeCoupe = (String) typesDeCoupe.getSelectedItem();
                if (typeDeCoupe.equals("RECTANGULAIRE")) {
                    if (null != cutCreationState) switch (cutCreationState) {
                        case SELECT_REFERENCE -> {
                            boolean isReferencePointValid = controller.isReferencePointValidForIrregularCut(clickedPoint);
                            if (isReferencePointValid) {
                                pointReference = clickedPoint;
                                cutCreationState = CutCreationState.SELECT_FIRST_CUT_POINT;
                                afficherMessage("Référence sélectionnée");
                            } else {
                                afficherMessage("Veuillez cliquer sur un coin du panneau ou une intersection valide.");
                            }
                        }
                        case SELECT_FIRST_CUT_POINT -> {
                            firstPointDeCoupe = clickedPoint;
                            cutCreationState = CutCreationState.SELECT_SECOND_CUT_POINT;
                            afficherMessage("Premier point de coupe sélectionné");
                        }
                        case SELECT_SECOND_CUT_POINT -> {
                            secondPointDeCoupe = clickedPoint;
                            controller.creerCoupeRectangulaire(pointReference, firstPointDeCoupe, secondPointDeCoupe);
                            zoomablePannel2.repaint();
                            cutCreationState = CutCreationState.SELECT_REFERENCE;
                            pointReference = null;
                            firstPointDeCoupe = null;
                            secondPointDeCoupe = null;
                            afficherMessage("Coupe Ajouter");
                        }
                        default -> {
                        }
                    }  
                } else if (typeDeCoupe.equals("EN_L")) {
                    if (null != cutCreationState) switch (cutCreationState) {
                        case SELECT_REFERENCE -> {
                            boolean isReferencePointValid = controller.isReferencePointValidForIrregularCut(clickedPoint);
                            if (isReferencePointValid) {
                                pointReference = clickedPoint;
                                cutCreationState = CutCreationState.SELECT_CUT_POINT;
                                afficherMessage("Référence sélectionnée");
                            } else {
                                afficherMessage("Veuillez cliquer sur un coin du panneau ou une intersection valide.");
                            }
                        }
                        case SELECT_CUT_POINT -> {
                            pointDeCoupe = clickedPoint;
                            controller.creerCoupeEnL(pointReference, pointDeCoupe);
                            zoomablePannel2.repaint();
                            cutCreationState = CutCreationState.SELECT_REFERENCE;
                            pointReference = null;
                            pointDeCoupe = null;
                            afficherMessage("Coupe Ajouter");
                        }
                        default -> {
                        }
                    }
                } else {
                    if (cutCreationState == CutCreationState.SELECT_REFERENCE) {
                        boolean isReferencePointValid = controller.isReferencePointValid(clickedPoint, typeDeCoupe);
                        if (isReferencePointValid) {
                            pointReference = clickedPoint;
                            cutCreationState = CutCreationState.SELECT_CUT_POINT;
                            afficherMessage("Référence sélectionnée");
                        } else {
                            afficherMessage("Veuillez cliquer sur une bordure valide pour la référence.");
                        }
                    } else if (cutCreationState == CutCreationState.SELECT_CUT_POINT) {
                        pointDeCoupe = clickedPoint;
                        controller.creerCoupe(typeDeCoupe, pointReference, pointDeCoupe);
                        zoomablePannel2.repaint();
                        cutCreationState = CutCreationState.SELECT_REFERENCE;
                        pointReference = null;
                        afficherMessage("Coupe Ajouter");
                    }
                }
            } else if (actualMode == ApplicationMode.SELECT) {
                this.actualMousePoint = clickedPoint;
                this.controller.switchSelectionStatus(clickedPoint.getX(), clickedPoint.getY());
                Coupe coupeSelectionnee = controller.getSelectedCoupe();

                if (coupeSelectionnee != null) {
                    afficherMessage("Coupe sélectionnée : " + coupeSelectionnee.getId());
                    Outil outilActuel = coupeSelectionnee.getOutil();
                    System.out.println("evenement : x=" + evt.getX() + ", y=" + evt.getY());
                    
    // actualMousePoint.setX((evt.getX() - offsetX) / zoomFactor);
  //   actualMousePoint.setY((evt.getY() - offsetY) / zoomFactor);
  //   double clickedActeuelXmm = convertisseur.convertPxToMm(actualMousePoint.getX());
  //   double clickedActeuelYmm = convertisseur.convertPxToMm(actualMousePoint.getY());
  //   actualMousePoint.setX(clickedActeuelXmm);
   //  actualMousePoint.setX(clickedActeuelYmm);
    

    // Capture et conversion des coordonnées initiales

    System.out.println("actualMousePoint : x=" + actualMousePoint.getX() + ", y=" + actualMousePoint.getY());
    
               System.out.println("update");
                    zoomablePannel2.repaint();
                } else {
                    afficherMessage("Aucune coupe sélectionnée.");
                }

            } 
        }
    }//GEN-LAST:event_zoomablePannel2MousePressed
private void detecterCoupeSurvolee(double mouseX, double mouseY) {
    coupeSurvolee = null; 
    coupeSurvolee = this.controller.switchSelectionStatus2(mouseX, mouseY);
    
    Point3D pointMouse = new Point3D(mouseX, mouseY, 0);
    PanneauDTO panneau = controller.getPanneauDTO();
    

//coupeSurvolee = controller.getSelectedCoupe2(pointMouse, "HORIZONTALE");
//if (coupeSurvolee == null) {
 //   coupeSurvolee = controller.getSelectedCoupe2(pointMouse, "RECTANGULAIRE");
//}
//if (coupeSurvolee == null) {
 //   coupeSurvolee = controller.getSelectedCoupe2(pointMouse, "EN_L");
//}
//if (coupeSurvolee == null) {
 //   coupeSurvolee = controller.getSelectedCoupe2(pointMouse, "VERTICALE");
//}
 //    for (CoupeDTO coupe : panneau.getCoupes()) {
 //        controller.getSelectedCoupe()
                 
  //       if (coupe.containsLigne(mouseX, mouseY, coupe.getType())) { // Vérifie si la souris est sur la coupe
 //            getCoupeAtPoint(Point3DReference, typeDeCoupe);
  //          coupeSurvolee = coupe;
 //           System.out.println(coupe);
 //           break;
//        }
   // }
if (coupeSurvolee != null) {
    System.out.println("coupesurvoller: " + coupeSurvolee);
    

    String typeCoupe = coupeSurvolee.getType().toString();

    String detailsCoupe;
    if (typeCoupe == "VERTICALE") {
        double positionX = coupeSurvolee.getArrive().getX();
        double positionY = coupeSurvolee.getArrive().getY();
        detailsCoupe = String.format("Type: %s | Largeur: %.2f mm | Hauteur: %.2f mm",
                                        typeCoupe, positionX, positionY);
    } else if (typeCoupe == "HORIZONTALE") {
        double positionX = coupeSurvolee.getArrive().getX();
        double positionY = coupeSurvolee.getArrive().getY();
        detailsCoupe = String.format("Type: %s | Largeur: %.2f mm | Hauteur: %.2f mm",
                                        typeCoupe, positionX, positionY);
    } else {
        double width = Math.abs(coupeSurvolee.getArrive().getX() - coupeSurvolee.getDepart().getX());
        double height = Math.abs(coupeSurvolee.getArrive().getY() - coupeSurvolee.getDepart().getY());
        detailsCoupe = String.format("Type: %s | Largeur: %.2f mm | Hauteur: %.2f mm",
                                        typeCoupe, width, height);
    }
    labelDimensions.setText(detailsCoupe);
        
    
    }

 else {
    labelDimensions.setText("");
}
}
    
private void modifierOutilAction() {
   String Outilcliquer = (String) jComboBoxOutils.getSelectedItem();
   String nomOutil = Outilcliquer.split(" \\(")[0];
   String nouveauDiametreStr = jTextFieldOutilLargeur.getText().trim();
   
    try {
        double nouveauDiametre = Double.parseDouble(nouveauDiametreStr);
        if (nouveauDiametre <= 0) {
            throw new NumberFormatException("Le diamètre doit être supérieur à 0.");
        }

        controller.modifierOutil(nomOutil, nouveauDiametre);
        
        ajoutComboBoxOutils();

        afficherMessage("L'outil " + nomOutil + " a été mis à jour.");
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Veuillez entrer un diamètre valide.", "Erreur", JOptionPane.ERROR_MESSAGE);
}
    zoomablePannel2.repaint();
    }
    private int alignToGrid(double position, double pixelsParMM, int tailleCaseMM) {
    double tailleCasePixels = tailleCaseMM * pixelsParMM;
    return (int) (Math.round(position / tailleCasePixels) * tailleCasePixels);
}

    private void SelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectActionPerformed
        // TODO add your handling code here:
        this.setMode(ApplicationMode.SELECT);
    }//GEN-LAST:event_SelectActionPerformed

    private void zoomablePannel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomablePannel2MouseDragged
                            if (SwingUtilities.isRightMouseButton(evt)) {
     int tableWidth = 1000;  // Largeur de la table en pixels (exemple)
     int tableHeight = 800;  // Hauteur de la table en pixels (exemple)

     String typeDeCoupe = (String) typesDeCoupe.getSelectedItem();
     ConvertisseurPxMm convertisseur = new ConvertisseurPxMm();

     // Obtenir la coupe sélectionnée et sa distance de référence
     Coupe coupeSelectionnee = controller.getSelectedCoupe();
     if (coupeSelectionnee == null) {
         System.out.println("Aucune coupe sélectionnée.");
         return;
     }

     

     // Calcul des déplacements (dx, dy)
        double zoomFactor = zoomablePannel2.getZoomLevel();
        double offsetX = zoomablePannel2.getOffsetX();
        double offsetY = zoomablePannel2.getOffsetY();
        

 //   actualMousePoint.setX((evt.getX() - offsetX) / zoomFactor);
 //   actualMousePoint.setY((evt.getY() - offsetY) / zoomFactor);
 //   double clickedActeuelXmm = convertisseur.convertPxToMm(actualMousePoint.getX());
 //   double clickedActeuelYmm = convertisseur.convertPxToMm(actualMousePoint.getY());
 //   actualMousePoint.setX(clickedActeuelXmm);
 //   actualMousePoint.setX(clickedActeuelYmm);
      Point deplacement = evt.getPoint();
      deplacement.x =(int) ((evt.getX() - offsetX) / zoomFactor);
      deplacement.y =(int) ((evt.getY() - offsetY) / zoomFactor);
      double clickedActeuelXmm = convertisseur.convertPxToMm(deplacement.x);
      double clickedActeuelYmm = convertisseur.convertPxToMm(deplacement.y);
      if (distanceFromReference == 0){
          controller.saveState();
          distanceFromReference = coupeSelectionnee.getDistanceFromReference();
      }
      


     double dx, dy;
     if (distanceFromReference <= 0) {
         dx = distanceFromReference + (clickedActeuelXmm - actualMousePoint.getX());
         dy = distanceFromReference + (clickedActeuelYmm - actualMousePoint.getY());
         delta.setLocation(-dx, -dy);

     } else { 

         dx = clickedActeuelXmm;
         dy = clickedActeuelYmm;
         delta.setLocation(dx, dy);
     }
         PanneauDTO panneau = controller.getPanneauDTO();

         System.out.println("Delta validé : dx=" + dx + ", dy=" + dy);
         System.out.println("panneaudepart: " + panneau.getDepart().getX());
         System.out.println("panneauarrive: " + panneau.getArrive().getX());

         if (panneau != null) {
             
             if (delta.x < panneau.getDepart().getX() || delta.x > panneau.getArrive().getX()
                     || delta.y < panneau.getDepart().getY() || delta.y  > panneau.getArrive().getY()) {
                 System.out.println("Déplacement hors limites, ignoré.");
                 return;
             }
         }


     // Gestion du déplacement en fonction du type de coupe
     if (typeDeCoupe.equals("HORIZONTALE")) {
         this.controller.updateSelectedItemsPositions(delta.y); // Déplacement uniquement vertical
     } else if (typeDeCoupe.equals("VERTICALE")) {
         this.controller.updateSelectedItemsPositions(delta.x); // Déplacement uniquement horizontal
     } else if (typeDeCoupe.equals("EN_L") || typeDeCoupe.equals("RECTANGULAIRE")) {
         this.controller.updateSelectedItemsPositions(delta.x); // Déplacement libre
     }

 //    actualMousePoint.setX(clickedActeuelXmm);
//     actualMousePoint.setX(clickedActeuelYmm);
    

     // Redessiner le panneau
     zoomablePannel2.repaint();
    }//GEN-LAST:event_zoomablePannel2MouseDragged

    } 

    private void ModifCoupeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifCoupeActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_ModifCoupeActionPerformed

    private void DeplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeplaceActionPerformed
        // TODO add your handling code here:
        controller.saveState();
        double delta = Double.parseDouble(ModifCoupe.getText());
        this.controller.updateSelectedItemsPositions(delta);
        zoomablePannel2.repaint();
    }//GEN-LAST:event_DeplaceActionPerformed

    private void SuppreseurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SuppreseurActionPerformed
        this.controller.supprimerCoupe();
        zoomablePannel2.repaint();
    }//GEN-LAST:event_SuppreseurActionPerformed

    private void jComboBoxOutilsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOutilsActionPerformed
        String Outilcliquer = (String) jComboBoxOutils.getSelectedItem();
        if (Outilcliquer != null){
        String nomOutil = Outilcliquer.split(" \\(")[0]; 
        controller.definirOutilActuel(nomOutil);
        System.out.println("Outil sélectionné : " + Outilcliquer);
        zoomablePannel2.repaint();
        }
    }//GEN-LAST:event_jComboBoxOutilsActionPerformed

    private void jButtonSupprimerOutilsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupprimerOutilsActionPerformed
        String outilSelectionne = (String) jComboBoxOutils.getSelectedItem();
        String nomOutil = extraireNomDuDropdown(outilSelectionne);
        controller.supprimerOutil(nomOutil); 
        ajoutComboBoxOutils();
    }//GEN-LAST:event_jButtonSupprimerOutilsActionPerformed
    private String extraireNomDuDropdown(String texte) {
    if (texte.contains("(")) {
        return texte.substring(0, texte.indexOf("(")).trim();
    }
    return texte.trim();
}
    private void typesDeCoupeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typesDeCoupeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typesDeCoupeActionPerformed

    private void btn_resetPannelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetPannelActionPerformed
    controller.resetPanneau();
    zoomablePannel2.repaint();
    }//GEN-LAST:event_btn_resetPannelActionPerformed

    private void txt_PanneauXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_PanneauXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PanneauXActionPerformed

    private void txt_PanneauYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_PanneauYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_PanneauYActionPerformed

    private void btn_redimensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_redimensionActionPerformed
    try {
        double largeurMm = Double.parseDouble(txt_PanneauY.getText());
        double longueurMm = Double.parseDouble(txt_PanneauX.getText());
        double epaisseurMm = Double.parseDouble(txt_PanneauZ.getText());

        if (largeurMm > 0 && longueurMm > 0 && epaisseurMm > 0) {
            if (largeurMm > 1524) { 
                this.afficherMessage("Largeur dépasse 1524mm (5ft)");
                System.out.println("Largeur dépasse 1524mm (5ft)");
                return;
            }
            if (longueurMm > 3048) { 
                this.afficherMessage("Longueur dépasse 3048mm (10ft)");
                System.out.println("Longueur dépasse 3048mm (10ft)"       );
                return;
            }
            controller.redimensionnerPanneau(longueurMm, largeurMm, epaisseurMm);
            zoomablePannel2.repaint();
            this.afficherMessage("Redimension de panneau complété");
        } else {
            this.afficherMessage("Valeurs doivent être > 0");
        }
    } catch (NumberFormatException e) {
        this.afficherMessage("Valeur numérique seulement ");
    }
    }//GEN-LAST:event_btn_redimensionActionPerformed

    private void confirmerchangeroutilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmerchangeroutilActionPerformed
    if (jComboBoxOutils.isEnabled()) {
        String nouvelOutilNom = ((String) jComboBoxOutils.getSelectedItem());
        String nomOutilExtrait = extraireNomDuDropdown(nouvelOutilNom);
        Coupe coupeSelectionnee = controller.getSelectedCoupe();

        if (coupeSelectionnee != null && nouvelOutilNom != null) {
            try {
                controller.changerOutilDeLaCoupeSelectionnee(nomOutilExtrait);
                afficherMessage("Outil changé pour : " + nomOutilExtrait);
                zoomablePannel2.repaint();
            } catch (IllegalArgumentException e) {
                afficherMessage("Erreur : Outil introuvable.");
            }
        }
    }
    }//GEN-LAST:event_confirmerchangeroutilActionPerformed

    private void modifierOutilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierOutilActionPerformed
        modifierOutilAction();
    }//GEN-LAST:event_modifierOutilActionPerformed

    private void txt_BordureXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_BordureXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_BordureXActionPerformed

    private void txt_BordureYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_BordureYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_BordureYActionPerformed

    private void btn_CouperBordureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_CouperBordureActionPerformed
    try {
        double largeurMm = Double.parseDouble(txt_BordureX.getText());
        double hauteurMm = Double.parseDouble(txt_BordureY.getText());

        if (largeurMm > 0 && hauteurMm > 0) {
            if (largeurMm > controller.getArrivePanneau().getX()) { 
                this.afficherMessage("La largeur dépasse la largeur du panneau: " + controller.getArrivePanneau().getX());
                System.out.println("La largeur dépasse la largeur du panneau");
                return;
            }
            if (hauteurMm > controller.getArrivePanneau().getY()) { 
                this.afficherMessage("La hauteur dépasse la hauteur du panneau: " + controller.getArrivePanneau().getY());
                System.out.println("La hauteur dépasse la hauteur du panneau"       );
                return;
            }
            controller.creerCoupeBordure(hauteurMm, largeurMm);
            zoomablePannel2.repaint();
            this.afficherMessage("Redimension de panneau complété");
        } else {
            this.afficherMessage("Valeurs doivent être > 0");
        }
    } catch (NumberFormatException e) {
        this.afficherMessage("Valeur numérique seulement ");
    }
    }//GEN-LAST:event_btn_CouperBordureActionPerformed

    private void btn_RedimBordureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_RedimBordureActionPerformed
        try {
        double largeurMm = Double.parseDouble(txt_BordureX.getText());
        double hauteurMm = Double.parseDouble(txt_BordureY.getText());

        if (largeurMm > 0 && hauteurMm > 0) {
            if (largeurMm > controller.getArrivePanneau().getX()) { 
                this.afficherMessage("La largeur dépasse la largeur du panneau: " + controller.getArrivePanneau().getX());
                System.out.println("La largeur dépasse la largeur du panneau");
                return;
            }
            if (hauteurMm > controller.getArrivePanneau().getY()) { 
                this.afficherMessage("La hauteur dépasse la hauteur du panneau: " + controller.getArrivePanneau().getY());
                System.out.println("La hauteur dépasse la hauteur du panneau"       );
                return;
            }
            controller.supprimerCoupeBordure();
            controller.creerCoupeBordure(hauteurMm, largeurMm);
            zoomablePannel2.repaint();
            this.afficherMessage("Redimension de panneau complété");
        } else {
            this.afficherMessage("Valeurs doivent être > 0");
        }
    } catch (NumberFormatException e) {
        this.afficherMessage("Valeur numérique seulement ");
    }
    }//GEN-LAST:event_btn_RedimBordureActionPerformed

    private void btn_SuppBordureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SuppBordureActionPerformed
        controller.supprimerCoupeBordure();
        zoomablePannel2.repaint();
    }//GEN-LAST:event_btn_SuppBordureActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        double Vitesse = Double.parseDouble(Vitesse_Avance.getText());
        double RPM = Double.parseDouble(RPM_Gcode.getText());
        try {
            controller.ExportGcode(Vitesse, RPM);
        }catch (NumberFormatException e) {
        this.afficherMessage("Export non fonctionnel ");
    }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jcheckBoxGrilleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcheckBoxGrilleActionPerformed
    System.out.println("Outi");
    boolean afficherGrille = jcheckBoxGrille.isSelected();
    double largeur = Double.parseDouble(largeurGrilleField.getText());
    double hauteur = Double.parseDouble(hauteurGrilleField.getText());
    zoomablePannel2.setAfficherGrille(afficherGrille, hauteur, largeur);
    zoomablePannel2.repaint();
    }//GEN-LAST:event_jcheckBoxGrilleActionPerformed

    private void appliquerTailleGrilleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appliquerTailleGrilleBtnActionPerformed
    try {
        double largeur = Double.parseDouble(largeurGrilleField.getText());
        double hauteur = Double.parseDouble(hauteurGrilleField.getText());
        boolean afficherGrille = jcheckBoxGrille.isSelected();
        zoomablePannel2.setAfficherGrille(afficherGrille, hauteur, largeur);


        zoomablePannel2.repaint();
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "Veuillez entrer des dimensions valides pour les cases.");
    } 
    }//GEN-LAST:event_appliquerTailleGrilleBtnActionPerformed

    private void Vitesse_AvanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Vitesse_AvanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Vitesse_AvanceActionPerformed

    private void RPM_GcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RPM_GcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RPM_GcodeActionPerformed


    private void zoomablePannel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomablePannel2MouseReleased
     if (SwingUtilities.isRightMouseButton(evt)) {
        distanceFromReference = 0; // Réinitialise la distance de référence
        System.out.println("distanceFromReference réinitialisée à zéro.");
        
        Point clicked = evt.getPoint();
        Point3D clickedPoint = new Point3D();
        clickedPoint.setX(clicked.x);
        clickedPoint.setY(clicked.y);

        double zoomFactor = zoomablePannel2.getZoomLevel();
        double offsetX = zoomablePannel2.getOffsetX();
        double offsetY = zoomablePannel2.getOffsetY();

        clickedPoint.setX((clickedPoint.getX() - offsetX) / zoomFactor);
        clickedPoint.setY((clickedPoint.getY() - offsetY) / zoomFactor);
        double largeur = Double.parseDouble(largeurGrilleField.getText());
        double hauteur = Double.parseDouble(hauteurGrilleField.getText());
        ConvertisseurPxMm convertisseur = new ConvertisseurPxMm();
        double clickedXmm = convertisseur.convertPxToMm(clickedPoint.getX());
        double clickedYmm = convertisseur.convertPxToMm(clickedPoint.getY());
        clickedPoint = new Point3D(clickedXmm, clickedYmm);
        this.actualMousePoint = clickedPoint;
        if (modeMagnetiqueCheckbox.isSelected()) {
        
        double currentX = actualMousePoint.getX();
        double currentY = actualMousePoint.getY();

        double alignedX = Math.round(currentX / largeur) * largeur;
        double alignedY = Math.round(currentY / hauteur) * hauteur;

        actualMousePoint.setX(alignedX);
        actualMousePoint.setY(alignedY);

        this.controller.updateSelectedItemsPositions(alignedX);
        zoomablePannel2.repaint();
        controller.saveState();

        System.out.println("Magnétisation appliquée : (" + alignedX + ", " + alignedY + ")");
        }
    }
    }//GEN-LAST:event_zoomablePannel2MouseReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
        double width = Double.parseDouble(txt_PanneauX.getText());
        double height = Double.parseDouble(txt_PanneauY.getText());
        double depth = Double.parseDouble(txt_PanneauZ.getText());
        
        if (width <= 0 || height <= 0 || depth <= 0) {
            afficherMessage("Les dimensions doivent être positive");
            return;
        }
        
        if (width > 3048) {
            afficherMessage("Largeur maximal 3048mm (10ft)");
            return;
        }
        
        if (height > 1524) {
            afficherMessage("Hauteur maximal 1524mm (5ft)");
            return;
        }
        
        controller.creerNouveauPanneau(width, height, depth);
        zoomablePannel2.repaint();
        afficherMessage("Nouveau panneau créer avec succès");
        
    } catch (NumberFormatException e) {
        afficherMessage("Les valeurs doivent être numérique");
    } catch (IllegalArgumentException e) {
        afficherMessage(e.getMessage());
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        controller.undo();
        zoomablePannel2.repaint();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        controller.redo();
        zoomablePannel2.repaint();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuSaveCNCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveCNCActionPerformed
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Emplacement de sauvegarde: ");
    int userSelection = fileChooser.showSaveDialog(this);
    
    if (userSelection == JFileChooser.APPROVE_OPTION) {
        String filePath = fileChooser.getSelectedFile().getAbsolutePath();
       
        if (!filePath.endsWith(".cnc")) {
            filePath += ".cnc";
        }
        try {
            controller.sauvegarderCnc(filePath); 
            System.out.println("Fichier sauvegardé avec succès à : " + filePath);
        } catch (Exception e) {
            System.out.println("Erreur lors de la sauvegarde du fichier: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jMenuSaveCNCActionPerformed

    private void jMenuImportCNCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuImportCNCActionPerformed
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Choisissez un fichier CNC à importer: ");
    int userSelection = fileChooser.showOpenDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        String filePath = fileChooser.getSelectedFile().getAbsolutePath();

        if (filePath.endsWith(".cnc")) {
            try {
                controller.importerCnc(filePath);
                System.out.println("Fichier importé avec succès à : " + filePath);
                zoomablePannel2.repaint();
            } catch (Exception e) {
                System.out.println("Erreur lors de l'importation du fichier: " + e.getMessage());
            }
        } else {
            System.out.println("Erreur: Le fichier sélectionné n'est pas un fichier .cnc");
        }
    }

    }//GEN-LAST:event_jMenuImportCNCActionPerformed

    private void modeMagnetiqueCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeMagnetiqueCheckboxActionPerformed

    }//GEN-LAST:event_modeMagnetiqueCheckboxActionPerformed

    private void zoomablePannel2MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomablePannel2MouseMoved
                ConvertisseurPxMm convertisseur = new ConvertisseurPxMm();
        double zoomFactor = zoomablePannel2.getZoomLevel();
        double offsetX = zoomablePannel2.getOffsetX();
        double offsetY = zoomablePannel2.getOffsetY();
        Point clicked = evt.getPoint();
        Point3D clickedPoint = new Point3D();
        clickedPoint.setX(clicked.x);
        clickedPoint.setY(clicked.y);
        
        clickedPoint.setX((clickedPoint.getX() - offsetX) / zoomFactor);

        clickedPoint.setY((clickedPoint.getY() - offsetY) / zoomFactor);
        
        double clickedXmm = convertisseur.convertPxToMm(clickedPoint.getX());
        double clickedYmm = convertisseur.convertPxToMm(evt.getPoint().getY());
        //System.out.println("monx " + clickedXmm + "mony " + clickedYmm);
        detecterCoupeSurvolee(clickedXmm, clickedYmm);
  //      repaint();
    }//GEN-LAST:event_zoomablePannel2MouseMoved


    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Afficheur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Afficheur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Afficheur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Afficheur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Afficheur().setVisible(true);
//            }
//        });
//    }
    private void afficherMessage(String message) {
        messageLabel.setText(message);
    }


    public void setMode(ApplicationMode newMode){
        this.actualMode = newMode;
    }
    
    private void updateCoordinates(java.awt.event.MouseEvent evt) {
    double zoomFactor = zoomablePannel2.getZoomLevel();
    double offsetX = zoomablePannel2.getOffsetX();
    double offsetY = zoomablePannel2.getOffsetY();
    
    double mouseX = (evt.getX() - offsetX) / zoomFactor;
    double mouseY = (evt.getY() - offsetY) / zoomFactor;
    
    ConvertisseurPxMm convertisseur = new ConvertisseurPxMm();
    double xMm = convertisseur.convertPxToMm(mouseX);
    double yMm = convertisseur.convertPxToMm(mouseY);
    
    jLabel7.setText(String.format("Coordonnées du Point: X: %.1f mm, Y: %.1f mm", xMm, yMm));
}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Couper;
    private javax.swing.JButton Deplace;
    private javax.swing.JTextField ModifCoupe;
    private javax.swing.JTextField RPM_Gcode;
    private javax.swing.JToggleButton Select;
    private javax.swing.JButton Suppreseur;
    private javax.swing.JTextField Vitesse_Avance;
    private javax.swing.JButton appliquerTailleGrilleBtn;
    private javax.swing.JButton btn_CouperBordure;
    private javax.swing.JButton btn_RedimBordure;
    private javax.swing.JButton btn_SuppBordure;
    private javax.swing.JButton btn_redimension;
    private javax.swing.JButton btn_resetPannel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton confirmerchangeroutil;
    private javax.swing.JTextField hauteurGrilleField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonAjouterOutils;
    private javax.swing.JButton jButtonSupprimerOutils;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JComboBox<String> jComboBoxOutils;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuImportCNC;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuSaveCNC;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldNomOutils;
    private javax.swing.JTextField jTextFieldOutilLargeur;
    private javax.swing.JCheckBox jcheckBoxGrille;
    private javax.swing.JLabel labelDimensions;
    private javax.swing.JTextField largeurGrilleField;
    private javax.swing.JPanel mainPannel;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JCheckBox modeMagnetiqueCheckbox;
    private javax.swing.JButton modifierOutil;
    private javax.swing.JTextField txt_BordureX;
    private javax.swing.JTextField txt_BordureY;
    private javax.swing.JTextField txt_PanneauX;
    private javax.swing.JTextField txt_PanneauY;
    private javax.swing.JTextField txt_PanneauZ;
    private javax.swing.JComboBox<String> typesDeCoupe;
    private ca.ulaval.equipe58.UI.ZoomablePannel zoomablePannel2;
    // End of variables declaration//GEN-END:variables
}
